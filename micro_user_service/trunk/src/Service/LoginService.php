<?php
/**
 * Created by PhpStorm.
 * User: qu
 * Date: 2019/10/29
 * Time: 16:16
 */

namespace Micro\User\Service;


use Illuminate\Support\Facades\Log;
use Micro\Common\Base\BaseService;
use Micro\Common\Criteria\Criteria;
use Micro\User\Middleware\CheckRecommendMiddle;
use Micro\User\Middleware\CreateAccount;
use Micro\User\Middleware\CreateTeamMiddle;
use Micro\User\Middleware\MobileCreateUserMiddle;
use Micro\User\Repo\CommUserRepo;

class LoginService extends BaseService
{
    public $repo;

    public function __construct(CommUserRepo $repo)
    {
        $this->repo = $repo;
    }

    public function getRules()
    {
        parent::getRules(); // TODO: Change the autogenerated stub
    }

    public $middleware=[
        //doLoginProcessFirst
        CheckRecommendMiddle::class=>[
            'only'=>['doLoginProcessFirst']
        ],
        MobileCreateUserMiddle::class=>[
            'only'=>['doLoginProcessFirst']
        ],
        CreateTeamMiddle::class=>[
            'only'=>['doLoginProcessFirst']
        ],
        CreateAccount::class=>[
            'only'=>['doLoginProcessFirst']
        ],
    ];

    public function doLoginProcessFirst($request)
    {
        Log::info('司机登录-----'.$request['mobile']);
        $ret = $this->processLogin($request['mobile']);

        $token=Token()
            ->setId($ret['id'])
            ->setName($ret['login_name'])
            ->setRole($ret['user_tariff_code'])
            ->getToken();
        $this->repo->update($ret['user_id'],['token'=> md5($token)]);
        return $token;
    }

    public function doLoginProcess($request)
    {
        Log::info('司机登录-----'.$request['mobile']);
        $ret = $this->processLogin($request['mobile']);
        Log::info(json_encode($ret));
        $token=Token()
            ->setId($ret['id'])
            ->setName($ret['login_name'])
            ->setRole($ret['user_tariff_code'])
            ->getToken();
        $this->repo->update($ret['user_id'],['token'=> md5($token)]);
        return $token;
    }

    public function processLogin($mobile)
    {
        $user = $this->repo->getUserByLoginName($mobile);
        //如果用户不存在
        if (!$user) {
            Err("USER_NO_EXIST");
        }
        if($user['status'] == config('const_user.LOGOUT.code')){
            Err('THE USER LOCK');
        }
        if($user['status'] == config('const_user.LOCKED_USER.code')){
            Err('PULL_THE BLACK');
        }
        $status = config('const_user.SIGN_UP.code');
        if ($status == $user['status']) {
            //注册用户首次登陆变更状态
            // APPROVE_USER
            $code = config('const_user.APPROVE_USER.code');
            $this->repo->updateUser($user['user_id'], array('status'=>$code));
        }
        $this->repo->updateUser($user['user_id'], array('last_login_time'=>date('Y-m-d H:i:s')));
        return $user;
    }

    public function CheckRegistrationStatus($request){
        $criteria1=Criteria::create()
            ->where('login_name','=',$request['mobile']);
        $user_info=$this->repo->first($criteria1);
        if(!empty($user_info)){
            $ret=[
                'status'=>'0020',
            ];
        }else{
            $ret=['status'=>'0000'];
        }
        return $ret;
    }

    public function getUserInfo($request){
        $criteria1=Criteria::create()
            ->where('login_name','=',$request['mobile']);
        $user_info=$this->repo->first($criteria1);

        return $user_info;
    }

    public function getUserInfoById($request){
        $user_info=$this->repo->find($request['user_id']);

        return $user_info;
    }
}